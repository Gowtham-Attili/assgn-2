JENKINS

What is Jenkins?
Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.
Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.

PIPELINE

What is Jenkins Pipeline?
Jenkins Pipeline is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins.Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines "as code" via the Pipeline domain-specific language (DSL) syntax.

The definition of a Jenkins Pipeline is written into a text file (called a Jenkinsfile) which in turn can be committed to a project’s source control repository.This is the foundation of "Pipeline-as-code"; treating the CD pipeline a part of the application to be versioned and reviewed like any other code.

Creating a Jenkinsfile and committing it to source control provides a number of immediate benefits:

->Automatically creates a Pipeline build process for all branches and pull requests.
->Code review/iteration on the Pipeline (along with the remaining source code).
->Audit trail for the Pipeline.
->Single source of truth [3] for the Pipeline, which can be viewed and edited by multiple members of the project.

Declarative versus Scripted Pipeline syntax:

A Jenkinsfile can be written using two types of syntax - Declarative and Scripted.
Declarative and Scripted Pipelines are constructed fundamentally differently. Declarative Pipeline is a more recent feature of Jenkins Pipeline which:
->provides richer syntactical features over Scripted Pipeline syntax, and
->is designed to make writing and reading Pipeline code easier.

Many of the individual syntactical components (or "steps") written into a Jenkinsfile, however, are common to both Declarative and Scripted Pipeline.

Why Pipeline?
Jenkins is, fundamentally, an automation engine which supports a number of automation patterns. Pipeline adds a powerful set of automation tools onto Jenkins, supporting use cases that span from simple continuous integration to comprehensive CD pipelines. By modeling a series of related tasks, users can take advantage of the many features of Pipeline:

Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit, review, and iterate upon their delivery pipeline.

Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins controller.

Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run.

Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel.

Extensible: The Pipeline plugin supports custom extensions to its DSL [1] and multiple options for integration with other plugins.


Pipeline concepts
The following concepts are key aspects of Jenkins Pipeline, which tie in closely to Pipeline syntax (see the overview below).

Pipeline
A Pipeline is a user-defined model of a CD pipeline. A Pipeline’s code defines your entire build process, which typically includes stages for building an application, testing it and then delivering it.

Also, a pipeline block is a key part of Declarative Pipeline syntax.

Node
A node is a machine which is part of the Jenkins environment and is capable of executing a Pipeline.

Also, a node block is a key part of Scripted Pipeline syntax.

Stage
A stage block defines a conceptually distinct subset of tasks performed through the entire Pipeline (e.g. "Build", "Test" and "Deploy" stages), which is used by many plugins to visualize or present Jenkins Pipeline status/progress.

Step
A single task. Fundamentally, a step tells Jenkins what to do at a particular point in time (or "step" in the process). For example, to execute the shell command make use the sh step: sh 'make'. When a plugin extends the Pipeline DSL, that typically means the plugin has implemented a new step.

Declarative Pipeline fundamentals
In Declarative Pipeline syntax, the pipeline block defines all the work done throughout your entire Pipeline.

pipeline {
    agent any 1
    stages {
        stage('Build') { 2
            steps {
                3//
            }
        }
        stage('Test') { 4
            steps {
                5//
            }
        }
        stage('Deploy') { 6
            steps {
               7 //
            }
        }
    }
}

1.Execute this Pipeline or any of its stages, on any available agent.
2.Defines the "Build" stage.
3.Perform some steps related to the "Build" stage.
4.Defines the "Test" stage.
5.Perform some steps related to the "Test" stage.
6.Defines the "Deploy" stage.
7.Perform some steps related to the "Deploy" stage.

Scripted Pipeline fundamentals
In Scripted Pipeline syntax, one or more node blocks do the core work throughout the entire Pipeline. Although this is not a mandatory requirement of Scripted Pipeline syntax, confining your Pipeline’s work inside of a node block does two things:
1.Schedules the steps contained within the block to run by adding an item to the Jenkins queue. As soon as an executor is free on a node, the steps will run.
2.Creates a workspace (a directory specific to that particular Pipeline) where work can be done on files checked out from source control.

node { 1
    stage('Build') { 2
       3 //
    }
    stage('Test') { 4
        5//
    }
    stage('Deploy') { 6
       7 //
    }
}

1.Execute this Pipeline or any of its stages, on any available agent.
2.Defines the "Build" stage. stage blocks are optional in Scripted Pipeline syntax. However, implementing stage blocks in a Scripted Pipeline provides clearer visualization of each `stage’s subset of tasks/steps in the Jenkins UI.
3.Perform some steps related to the "Build" stage.
4.Defines the "Test" stage.
5.Perform some steps related to the "Test" stage.
6.Defines the "Deploy" stage.
7.Perform some steps related to the "Deploy" stage.

Managing Jenkins
Most standard administrative tasks can be performed from the screens in the Manage Jenkins section of the dashboard. In this chapter, we look at these screens and explain how to use them.

The tiles displayed on the Manage Jenkins page are grouped logically. Here we discuss the pages that are part of the standard installation. Plugins may add pages to this screen.

The top of the Manage Jenkins screen may contain "Monitors" that alert you when a new version of the Jenkins software or a security update is available. Each monitor includes a description of the issue it is reporting and links to additional information about the issue.

Managing Jenkins include 

Configuring the System
Configuration as Code
Managing Tools
Managing Plugins
About Jenkins
System Information
Jenkins Features Controlled with System Properties
Change System Time Zone
Jenkins CLI
Script Console
Groovy Hook Scripts
Managing Nodes
In-process Script Approval
Users
Themes for user interface
User Content
Spawning Processes From Build
